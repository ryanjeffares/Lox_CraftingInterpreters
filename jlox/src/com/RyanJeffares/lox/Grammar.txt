expression      > literal
                | unary
                | binary
                | grouping ;

literal         > NUMBER | STRING | "true" | "false" | "nil" ;
grouping        > "(" expression ")" ;
unary           > ( "-" | "!" ) expression ;
binary          > expression operator expression ;
operator        > "==" | "!=" | "<" | "<=" | ">" | ">="
                | "+"  | "-"  | "*" | "/"  ;

;==== Precedence Rules ====;

expression      > equality
equality        > comparison ( ( "!=" | "==" ) comparison )* ;
comparison      > term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            > factor ( ( "-" | "+" ) factor )* ;
factor          > unary ( ( "/" | "*" ) unary )* ;
unary           > ( "!" | "-" ) unary
                | primary ;
primary         > NUMBER | STRING | "true" | "false" | "nil"
                | "(" expression ")" ;

;==== Statement Rules ====;

program         > declaration* EOF ;
declaration     > varDecl
                | statement ;
varDecl         > "var" IDENTIFIER ( "=" expression )? ";" ;
statement       > exprStmt
                | printStmt
exprStmt        > expression ";" ;
printStmt       > "print" expression ";" ;